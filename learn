   			SQL Learning 

26/2/2019

SQL:
 
  *Structure query language is used for accessing and manipulating the database.
  * SQL keyword are NOT case sensitive. we write all the keywords in "UPPER CASE".
  * Foo refers to the placeholder and it can be changing the value based on the programming.
	*---> refers to the operator WHERE clause to perform operations. 
		and to specify the consitions.	
RDBMS:
   Relational DBMS is the basis for all the sql modern database system as MS SQL SERVER ,
IBM like oracle.


	* Execute 
	* Retrieve
	* Insert
	* Update
	* Delete
	* Create
	* Set Table and procedure and views

	SELECT - extracts data from a database
	UPDATE - updates data in a database
	DELETE - deletes data from a database
	INSERT INTO - inserts new data into a database
	CREATE DATABASE - creates a new database
	ALTER DATABASE - modifies a database
	CREATE TABLE - creates a new table
	ALTER TABLE - modifies a table
	DROP TABLE - deletes a table
	CREATE INDEX - creates an index (search key)
	DROP INDEX - deletes an index

Table:
    The data stored in database objects called "TABLES".
 	
    * A table is a collection of related data entries and it consists of columns and rows.
    * Tables contain records (rows) with data.


Eg: SELECT * FROM customeres.

DATABASE:
   The database most often contains one r more tables

  sabrin I am going to create a Table which names the Family.
   then inside the records found which is family members


 1.SELECT :
   SELECT family id FROM family;

  suppose we need to find the full family details  we need to give this syntax.
  Eg: SELECT * FROM family;
 
  Then suppose I need to get the particular details from the table so i need to create a 
    SELECT family id, family names FROM family;
   sabrin may i include the country details 

2. SELECT DISTINCT country From family;
	
	SQL WHERE Clause
 		
	SELECT family id,family names from family WHERE 1;
	SELECT * From Family WHERE Country="Mexico";

	SQL AND OR NOT operators:

3. AND: For True all conditions are true

      SELECT family ID,family name FROM family WHERE familyID=1 AND familyID=2;
	 
      Example: SELECT * FROM family WHERE familyID="1" and familyname="germany";


4. OR: separated by any one of the conditions is true

	SELECT * FROM Family WHERE familyID=1 or FamilyID=2;

5. NOT: separated by NOT occur the condition 
   SELECT familyID,familyname * FROM family WHERE NOT familyID;

 eg: SELECT * FROM family WHERE NOT familyId=1 AND NOT familyId=2;


6. If you want to order by the alphabetic order user ORDER BY
	SELECT * FROM family ORDER BY name;
 
7. INSERT INTO:
   * it is used to insert new record in a table and mainly include the VALUES keyword.

	INSERT INTO family (column1,column2,column3) VALUES (value1,value2,value3,...);

8. NULL Operator
   
		SELECT Familyid,familyname from family WHERE Address IS NULL;
		
		eg:SELECT * FROM customers WHERE customerdetails IS NULL;
  
9.UPDATE:

	The main syntax of update is

	-->UPDATE table_name SET column1 = value1, column2 = value2, ...WHERE condition;
     		
		UPDATE family SET familyaddress=1, familycountry=2, WHERE family;
	
  	 If I want to insert multiple records to add

		**UPDATE family SET familyname="hii" WHERE Country="hungary";

10. DELETE:
	
	DELETE FROM family WHERE familyId=1;

11.SQL TOP, LIMIT or ROWNUM Clause

	SELECT TOP is used to specify the number of records to return.
	
       Eg: SELECT  TOP number | Percent column_name FROM family WHERE familyid=1 LIMIT number;
 	
	i)SELECT TOP 3 * FROM Family;
	ii) SELECT * FROM family LIMIT 3;
	iii) SELECT * FROM family WHERE ROWNUM <=3;

	SELECT TOP 50 PERCENT *


27/02/2019


12. JOINS:
    
   inner join---> records that have matched values n both of the tables.
   syntax:
	
    sabrin for your reference this syntax is much better for you.
	*here the columnname is which matches for the table is required.

    select tablename1.columnname1,tablename2.columnname2 from tablename1 inner join tablename2 on tablename1.columnname=tablename2.columnname;

    Eg program:



	create table sab1(sbid int, sbname varchar(250),sbmark varchar(250));

	select * from sab1;
	select * from sab2;

	insert into sab1(sbid,sbname,sbmark) values(1,'was',150),(2,'sab',200),(3,'sel',150);

	create table sab2(said int, saname varchar(250),sabmark varchar(250));

	select * from sab2;

	insert into sab2(said,saname,sabmark) values (1,'eem',150),(4,'noor',200),(5,'pri',250);

	update sab1 set sbname='sabrin' where  sbid=2;

	update sab2 set sabmark=200 where said=1;

	select sab1.sbname,sab2.saname from sab1 inner join sab2 on sab1.sbname=sab2.saname;

13.UNION and GROUP

     union is used to.... for your reference combination of two tables 
     must have the same number of columns...
	
	SYNTAX:
		SELECT column_name(s) from table1 UNION SELECT column_name from table2;
		SELECT column_name(s) from table1 UNION ALL SELECT column_name from table2;

14.LIKE syntax:
	
	---> % refers to zero,one or multiple characters.
	---> _ represents single character.
15.COUNT()
    SELECT COUNT(column_name) from table_name where condition;

16.AVG()
      SELECT AVG(column_name) from table_name where condition;


17. SUM()

 select sum(column_name) from table_name where condition;


18. UNIQUE:
	the unique constraint ensures that all the values in a column are different.

        
    create table sabrin (id int not null unique,lastname varchar(255) not null,age int);

19.DATE: 
	select today = CONVERT(char(20),getdate());



TASK FOR THE GENIOUS:
	****https://ramkedem.com/en/practice-sql-nested-queries/
	
 	****https://www.c-sharpcorner.com/UploadFile/f0b2ed/pivot-and-unpovit-in-sql-server/



28/02/2019

stored procedure:

	It is used to store the program we processing the insert, update and delete.
	* accept input parameters and return multiple values in the form of output parameters to the calling procedure or batch.
	* contain program statements that including the operations in a database.
	
	
	

""""""Stored procedures use parameters mapping concept""""""
    
step1:

CREATE TABLE studbs(rid int,rname varchar(200),rfees float)

SELECT * FROM studbs;

create procedure insertDatass

(@RollNo int,

@Name varchar(50),

@Fees float)

as

begin

insert into studbs values(@RollNo,@Name,@Fees)

select * from studbs

update studbs set rname=@Name where rid=@RollNo;

end

EXEC insertDatass 5,'bvc',55,'insert'


STEP:2


CREATE PROCEDURE stus(@rid int,@rname varchar(200),@rfees float,@condition varchar(500)='')

AS

BEGIN

IF @condition='INSERT'

BEGIN

INSERT INTO studbs values(@rid,@rname,@rfees)

END
 
IF @condition='SELECT'

BEGIN

SELECT * FROM studbs

END

END

EXEC stus 1,'was',50,'select'


step 3:

 ""+++MAy be useful+++""
create table myshop(mid int,mname varchar(500),mprd varchar(500))

select * from myshop

create procedure myshopc(@mid int,@mname varchar(50),@mprd varchar(500))

as

begin

insert into myshop values(@mid,@mname,@mprd)

select * from myshop

end

exec myshopc 1,'nhm',50


1/3/2019:

Trigger program

**create table studentsz(id varchar(20),name varchar(250),mark1 varchar(150),mark2 varchar(200),mark3 varchar(250))

--truncate table studentsz;
--drop table studentszfinal;


insert into studentsz(id,name,mark1,mark2,mark3) values(1,'kavi',78,89,67),(2,'priya',90,87,76),(3,'sabrin',100,100,97)
update studentsz set


create table studentszfinal(id varchar (20),name varchar(250),total varchar(250),per varchar(250))
select * from studentszfinal
go

alter trigger studentsztrigger on studentsz
for insert
as
declare @sid varchar(20);
declare @sname varchar(250);
declare @total varchar(150);
declare @per varchar(200);

select @sid= i.id,
	   @sname= i.name,
	   @total= (i.mark1 + i.mark2 + i.mark3),
	   @per= ((i.mark1+i.mark2+i.mark3)/3) from inserted i;
insert into studentszfinal (id,name,total,per) values (@sid,@sname,@total,@per)
go

insert into studentszfinal (id,name,total,per) values (3,'sabrin',(100+100+97),(100+100+97)/3)


using if else -if program "MINE":
CREATE TABLE mys1(m1id integer NOT NULL PRIMARY KEY,m1name varchar(500),m1cst float,mcity varchar(250))

--DROP TABLE mys1
SELECT * FROM mys1;

INSERT INTO mys1(m1id,m1name,m1cst,mcity) VALUES (1,'sab',25,'brazil'),(2,'fidas',50,'france'),(3,'kavi',75,'america');

go

ALTER PROCEDURE myc11(@m1id int,@m1name varchar(500),@m1cst float,@mcity varchar(250),@condition varchar(500)='')

AS 

BEGIN

	IF @condition='insert'

	BEGIN

		INSERT INTO mys1(m1id,m1name,m1cst,mcity) VALUES(@m1id,@m1name,@m1cst,@mcity)

	END

	IF @condition='SELECT'

	BEGIN

		SELECT * FROM mys1

	END
 
	IF @condition='update'

	BEGIN

		update mys1 set m1cst=@m1cst,mcity=@mcity where @m1id=m1id;
		
	END

	else IF @condition='DELETE'
	
	BEGIN
		DELETE FROM mys1 where @m1cst=m1cst;
	END



END

EXEC myc11 2,'fidas',200,'canada','update';


conditional statements:

syntax:

refer link: "http://doc.nuodb.com/Latest/Content/SQL-Procedural-Conditional-Statements.htm"

IF ( sql_boolean_expression | sql_query_statement ) 
    sql_code_block 
    [ ELSE sql_code_block ] 
END_IF;

WHILE ( sql_boolean_expression | sql_query_statement ) 
    sql_code_block 
END_WHILE;  

TRY sql_code_block 
    CATCH(error_variable) 
    sql_code_block 
END_TRY;       

[ [ VAR ] var_name var_type [ , var_name var_type ]... = ] 
    CASE input_expression 
        WHEN (when_expression) THEN result_expression 
        [ WHEN (when_expression) THEN result_expression ]...
        [ ELSE result_expression ] 
    END;



WHEN CASE usage:

create procedure resj(@mname varchar(250))
as
begin
	select case (@mname)
	when 'sabrin' then 'match'
	when 'sulthana' then 'match'
	when 'kavipriya' then 'match'
	else 'unknown'end
end
exec resj 'sabrin'



DATE :
 sabrin put the syntax for 
 ---->DATETIME DEFAULT GETDATE()
 
 
 
 
 while condition statement:
 
alter procedure srecords(@condition varchar(255))
as
Declare @id int,@name varchar(255),@count varchar(255),@result varchar(255);
set @id=1;
Set @count = (Select Count(*) from srecord)
while (@id<=@count)
	begin
		if @condition = 'Pass'
			Set @name = (Select name from srecord where id = @id and result = @condition)
			Set @result = (Select result from srecord where id = @id and result = @condition)
			print @name+'->'+@result

		if @condition = 'fail'
			Begin
				Set @name = (Select name from srecord where id = @id and result = @condition)
				Set @result = (Select result from srecord where id = @id and result = @condition)
				print @name+'->'+@result
			End
	set @id=@id+1
	end
  exec srecords @condition ='pass'
 4/03/2019:
 CURSOR: https://www.dotnettricks.com/learn/sqlserver/sql-server-different-types-of-cursors

 	1.static server
	2.dynamic server
	3.forward only cursor
	4.keyset driven cursor


	*cursor is used to update the values row by row
	* fetch the record by record

	The steps to perform cursor:
		1.declare
		2.open
		3.fetch has various types.
			i) NEXT
			ii)PRIOR
			iii)FIRST
			iv)LAST
			v)ABSOLUTE
			vi)RELATIVE

		4.process
		5.close
		6.deallocate


cursor program:

Declare @tid,
Declare cursorname cursor

dynamic for 

select tid from tablename

open cursor_name

if @@Cursor_rows >0 //
fetch next from cursorname into tid

while @@fetch_status = 0

5/03/2019/ Tuesday 
 
completed trigger

6/3/2019/Wednesday

looping in win automation:

loop
display message
end loop


Image OCR:

step1: launch the browser watever it may be
step2: send keys 
	eg: keystrokes like Desktop Automation to the active window.
step3: {Enter} the active window
step 4: Get mouse position 
step 5: create Tesseract OCR Engine
%OCREngine%

step6: wait 6
step7:move mouse to text on screen(OCR)
 like desktop automation 
step 8: move mouse to image....


07/03/2019 thursday
 completed the development and management course for that certificate purpose.


08/13/2019
subqueries:
	A subquery is a SELECT statement (i.e) nested within another T-SQL statement.
	A subquery is also called an inner query.
	***subquery cannot contain a ORDER-BY clause.***
	A query can contain more than one sub-query usually contain the WHERE clause.

 very important link***https://www.w3resource.com/sql/subqueries/understanding-sql-subqueries.php ****

subqueries must be enclosed with paranthesis

(SELECT [DISTINCT] subquery_select_argument
FROM {table_name | view_name}
{table_name | view_name} ...
[WHERE search_conditions]
[GROUP BY aggregate_expression [, aggregate_expression] ...]
[HAVING search_conditions]
)


SqlQueries:

	left outer join(*=)
	right outer join(=*)
	full outer join

	***SELECT * FROM Authors, BOOKs WHERE Authors.AuthorID *= BOOKs.AuthorID ***


    right outer join ----> ***SELECT * FROM BOOKs, Authors WHERE BOOKs.AuthorID =* Authors.AuthorID ***

	SELECT * FROM Authors LEFT OUTER JOIN BOOKs ON Authors.AuthorID = BOOKs.AuthorID
	SELECT * FROM BOOKs RIGHT OUTER JOIN Authors ON BOOKs.AuthorID = Authors.AuthorID

 Pivot table:
 SELECT first_column AS <first_column_alias>,
[pivot_value1], [pivot_value2], ... [pivot_value_n]
FROM 
(<source_table>) AS <source_table_alias>
PIVOT 
(
 aggregate_function(<aggregate_column>)
 FOR <pivot_column>
 IN ([pivot_value1], [pivot_value2], ... [pivot_value_n])
) AS <pivot_table_alias>;
